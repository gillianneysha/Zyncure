import React, { useState, useEffect } from 'react';


const ShareSymptoms = () => {
  const [showShareModal, setShowShareModal] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [modalMessage, setModalMessage] = useState('');
  const [selectedSymptomsToShare, setSelectedSymptomsToShare] = useState('');
  const [symptomsDuration, setSymptomsDuration] = useState('');
  const [accessDuration, setAccessDuration] = useState('');
  const [connections, setConnections] = useState([]);
  const [selectedConnection, setSelectedConnection] = useState('');

  useEffect(() => {
    const fetchConnections = async () => {
      const { data, error } = await supabase.from('connections').select('*');
      if (!error) setConnections(data);
    };
    fetchConnections();
  }, []);

  const handleConfirmShare = async () => {
    if (!selectedSymptomsToShare || !symptomsDuration || !accessDuration || !selectedConnection) {
      setModalMessage('Please complete all fields before confirming.');
      setShowSuccessModal(true);
      return;
    }

    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      setModalMessage('Error fetching user.');
      setShowSuccessModal(true);
      return;
    }

    const { error } = await supabase.from('shared_symptoms').insert([
      {
        symptoms: selectedSymptomsToShare,
        duration: symptomsDuration,
        connection_id: selectedConnection,
        access_duration: accessDuration,
        shared_at: new Date().toISOString(),
        patient_id: user.id,
      },
    ]);

    if (error) {
      setModalMessage('Error sharing symptoms.');
    } else {
      setModalMessage('Symptoms shared successfully!');
    }

    setShowShareModal(false);
    setShowSuccessModal(true);
  };

  return (
    <div className="p-4">
      <button
        onClick={() => setShowShareModal(true)}
        className="bg-[#F98679] text-white px-4 py-2 rounded-md"
      >
        Share Symptoms
      </button>

      {/* Share Modal */}
      {showShareModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 shadow-2xl text-center max-w-sm w-full">
            <h2 className="text-xl font-bold text-[#3BA4A0] mb-4">Share Symptoms</h2>

            {/* Select Symptom */}
            <select
              className="w-full border border-gray-300 rounded-md mb-3 p-2"
              value={selectedSymptomsToShare}
              onChange={(e) => setSelectedSymptomsToShare(e.target.value)}
            >
              <option value="">Select Symptom</option>
              <option value="Period">Period</option>
              <option value="Feelings">Feelings</option>
              <option value="Skin">Skin</option>
              <option value="Metabolism">Metabolism</option>
            </select>

            {/* Symptom Duration */}
            <input
              type="text"
              placeholder="Enter symptom duration (e.g., 3 months)"
              className="w-full border border-gray-300 rounded-md mb-3 p-2"
              value={symptomsDuration}
              onChange={(e) => setSymptomsDuration(e.target.value)}
            />

            {/* Connection Dropdown */}
            <select
              className="w-full border border-gray-300 rounded-md mb-3 p-2"
              value={selectedConnection}
              onChange={(e) => setSelectedConnection(e.target.value)}
            >
              <option value="">Select Connection</option>
              {connections.map((conn) => (
                <option key={conn.id} value={conn.id}>
                  {conn.name}
                </option>
              ))}
            </select>

            {/* Access Duration */}
            <input
              type="text"
              placeholder="Enter access duration (e.g., 2 weeks)"
              className="w-full border border-gray-300 rounded-md mb-3 p-2"
              value={accessDuration}
              onChange={(e) => setAccessDuration(e.target.value)}
            />

            {/* Action Buttons */}
            <div className="flex justify-between mt-4">
              <button
                onClick={() => setShowShareModal(false)}
                className="px-4 py-2 bg-gray-300 text-gray-800 rounded-md"
              >
                Cancel
              </button>
              <button
                onClick={handleConfirmShare}
                className="px-4 py-2 bg-[#F98679] text-white rounded-md"
              >
                Confirm
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Success Modal */}
      {showSuccessModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 shadow-xl text-center max-w-sm w-full">
            <h2 className="text-lg font-semibold text-green-600 mb-4">Notice</h2>
            <p>{modalMessage}</p>
            <button
              onClick={() => setShowSuccessModal(false)}
              className="mt-4 px-4 py-2 bg-green-500 text-white rounded-md"
            >
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ShareSymptoms;
